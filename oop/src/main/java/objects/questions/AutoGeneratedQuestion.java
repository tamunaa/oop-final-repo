package objects.questions;

import java.util.*;

import static java.util.Collections.sort;

public class AutoGeneratedQuestion implements Question {
    private String question;
    private List<String> options;
    private int correctOptionIndex;
    private int timer = 0;

    public AutoGeneratedQuestion(String question, List<String> options, int correctOptionIndex) {
//        this.timer = timer;
        this.question = question;
        this.options = options;
        this.correctOptionIndex = correctOptionIndex;
    }

    @Override
    public int getTimer(){
        return timer;
    }

    @Override
    public void setTimer(int timer){
        this.timer = timer;
    }

    @Override
    public String getQuestion() {
        return question;
    }

    @Override
    public String[] getOptions() {
        return options.toArray(new String[options.size()]);
    }

    @Override
    public String[] getCorrectAnswers() {
        String[] answer = {options.get(correctOptionIndex)};
        return answer;
    }

    @Override
    public boolean isOrdered() {
        return false;
    }

    @Override
    public String getQuestionType() {
        return "MultiAnswer";
    }

    @Override
    public int getQuestionId() {
        return -1;
    }

    @Override
    public void setQuestionId(int questionId) {

    }

    public int getCorrectOptionIndex() {
        return correctOptionIndex;
    }

    @Override
    public int evaluate(String answer){
        if(answer.equals(options.get(correctOptionIndex)))return 1;
        else return 0;
    }

    @Override
    public int getNumFields(){
        return 4;
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(question).append("\n");
        for (int i = 0; i < options.size(); i++) {
            stringBuilder.append(i + 1).append(". ").append(options.get(i)).append("\n");
        }
        return stringBuilder.toString();
    }


    // Autogenerated Question
    public static AutoGeneratedQuestion generateQuestion() {
        Random random = new Random();
        int questionType = random.nextInt(17); // Random number between 0 and 17 (18 types of probability questions)

        switch (questionType) {
            case 0:
                return generateProbabilityOfSimpleEventQuestion();
            case 1:
                return generateProbabilityOfComplementaryEventQuestion();
            case 2:
                return generateProbabilityOfCombinedEventQuestion();
            case 3:
                return generateMeanQuestion();
            case 4:
                return generateMedianQuestion();
            case 5:
                return generateModeQuestion();
            case 6:
                return generateStandardDeviationQuestion();
            case 7:
                return generateAreaQuestion();
            case 8:
                return generatePerimeterQuestion();
            case 9:
                return generateUnionQuestion();
            case 10:
                return generateIntersectionQuestion();
            case 11:
                return generateAdditionQuestion();
            case 12:
                return generateSubtractionQuestion();
            case 13:
                return generateMultiplicationQuestion();
            case 14:
                return generateDivisionQuestion();
            case 15:
                return generateLimitQuestion();
            case 16:
                return generateDerivativeQuestion();
            case 17:
                return generateIntegralQuestion();
            default:
                throw new IllegalStateException("Unknown question type");
        }
    }


    // Autogenerated Math Question: Addition
    public static AutoGeneratedQuestion generateAdditionQuestion() {
        Random random = new Random();
        int num1 = random.nextInt(100);
        int num2 = random.nextInt(100);
        int answer = num1 + num2;

        String question = String.format("What is %d + %d?", num1, num2);

        return generateOptions(question, answer);
    }

    // Autogenerated Math Question: Subtraction
    public static AutoGeneratedQuestion generateSubtractionQuestion() {
        Random random = new Random();
        int num1 = random.nextInt(100);
        int num2 = random.nextInt(100);
        int answer = num1 - num2;

        String question = String.format("What is %d - %d?", num1, num2);

        return generateOptions(question, answer);
    }

    // Autogenerated Math Question: Multiplication
    public static AutoGeneratedQuestion generateMultiplicationQuestion() {
        Random random = new Random();
        int num1 = random.nextInt(20);
        int num2 = random.nextInt(20);
        int answer = num1 * num2;

        String question = String.format("What is %d * %d?", num1, num2);

        return generateOptions(question, answer);
    }

    // Autogenerated Math Question: Division
    public static AutoGeneratedQuestion generateDivisionQuestion() {
        Random random = new Random();
        int divisor = random.nextInt(9) + 1;
        int answer = random.nextInt(20) + 1;
        int num1 = divisor * answer;

        String question = String.format("What is %d รท %d?", num1, divisor);

        return generateOptions(question, answer);
    }


    // Autogenerated Probability Question: Probability of a Simple Event
    private static AutoGeneratedQuestion generateProbabilityOfSimpleEventQuestion() {
        Random random = new Random();
        int favorableOutcomes = random.nextInt(6) + 1;
        int totalOutcomes = random.nextInt(10) + 6;

        String question = String.format("What is the probability of getting a favorable outcome in an event with %d total outcomes and %d favorable outcomes?", totalOutcomes, favorableOutcomes);

        double probability = (double) favorableOutcomes / totalOutcomes;
        String formattedProbability = String.format("%.2f", probability);

        List<String> options = new ArrayList<>();
        options.add(formattedProbability);
        options.add(String.format("%.2f", probability * 100));
        options.add(String.format("%.2f", (1.0 - probability)));
        options.add(String.format("%.2f", (1.0 - probability) * 100));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Probability Question: Probability of a Complementary Event
    private static AutoGeneratedQuestion generateProbabilityOfComplementaryEventQuestion() {
        Random random = new Random();
        int favorableOutcomes = random.nextInt(6) + 1;
        int totalOutcomes = random.nextInt(10) + 6;

        String question = String.format("What is the probability of not getting a favorable outcome in an event with %d total outcomes and %d favorable outcomes?", totalOutcomes, favorableOutcomes);

        double probability = (double) favorableOutcomes / totalOutcomes;
        double complementaryProbability = 1.0 - probability;
        String formattedProbability = String.format("%.2f", complementaryProbability);

        List<String> options = new ArrayList<>();
        options.add(formattedProbability);
        options.add(String.format("%.2f", complementaryProbability * 100));
        options.add(String.format("%.2f", probability));
        options.add(String.format("%.2f", probability * 100));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Probability Question: Probability of Combined Events
    private static AutoGeneratedQuestion generateProbabilityOfCombinedEventQuestion() {
        Random random = new Random();
        int favorableOutcomesEventA = random.nextInt(4) + 1; // Random number of favorable outcomes for event A between 1 and 4
        int totalOutcomesEventA = random.nextInt(6) + 5; // Random total number of outcomes for event A between 5 and 10
        int favorableOutcomesEventB = random.nextInt(4) + 1; // Random number of favorable outcomes for event B between 1 and 4
        int totalOutcomesEventB = random.nextInt(6) + 5; // Random total number of outcomes for event B between 5 and 10

        String question = String.format("What is the probability of both events A and B occurring? (Event A: %d favorable outcomes out of %d, Event B: %d favorable outcomes out of %d)", favorableOutcomesEventA, totalOutcomesEventA, favorableOutcomesEventB, totalOutcomesEventB);

        double probabilityA = (double) favorableOutcomesEventA / totalOutcomesEventA;
        double probabilityB = (double) favorableOutcomesEventB / totalOutcomesEventB;
        double combinedProbability = probabilityA * probabilityB;
        String formattedProbability = String.format("%.2f", combinedProbability);

        List<String> options = new ArrayList<>();
        options.add(formattedProbability);
        options.add(String.format("%.2f", combinedProbability * 100));
        options.add(String.format("%.2f", probabilityA + probabilityB));
        options.add(String.format("%.2f", (probabilityA + probabilityB) * 100));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }


    // Autogenerated Statistics Question: Mean
    private static AutoGeneratedQuestion generateMeanQuestion() {
        Random random = new Random();
        int numOfElements = random.nextInt(10) + 5;

        List<Integer> data = new ArrayList<>();
        int sum = 0;

        for (int i = 0; i < numOfElements; i++) {
            int value = random.nextInt(101);
            data.add(value);
            sum += value;
        }

        String question = String.format("What is the mean of the following data set? %s", data.toString());

        double mean = (double) sum / numOfElements;
        String formattedMean = String.format("%.2f", mean);

        List<String> options = new ArrayList<>();
        options.add(formattedMean);
        options.add(String.format("%.2f", mean + 5));
        options.add(String.format("%.2f", mean - 5));
        options.add(String.format("%.2f", mean + 10));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Statistics Question: Median
    private static AutoGeneratedQuestion generateMedianQuestion() {
        Random random = new Random();
        int numOfElements = random.nextInt(10) + 5;

        List<Integer> data = new ArrayList<>();

        for (int i = 0; i < numOfElements; i++) {
            int value = random.nextInt(101);
            data.add(value);
        }

        sort(data);
        String question = String.format("What is the median of the following data set? %s", data.toString());

        double median;
        if (numOfElements % 2 == 0) {
            median = (double) (data.get(numOfElements / 2 - 1) + data.get(numOfElements / 2)) / 2;
        } else {
            median = data.get(numOfElements / 2);
        }

        String formattedMedian = String.format("%.2f", median);

        List<String> options = new ArrayList<>();
        options.add(formattedMedian);
        options.add(String.format("%.2f", median + 5));
        options.add(String.format("%.2f", median - 5));
        options.add(String.format("%.2f", median + 10));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Statistics Question: Mode
    private static AutoGeneratedQuestion generateModeQuestion() {
        Random random = new Random();
        int numOfElements = random.nextInt(10) + 5;

        List<Integer> data = new ArrayList<>();

        for (int i = 0; i < numOfElements; i++) {
            int value = random.nextInt(10);
            data.add(value);
        }

        String question = String.format("What is the mode of the following data set? %s", data.toString());

        int[] frequencies = new int[10];
        for (int value : data) {
            frequencies[value]++;
        }

        int maxFrequency = 0;
        List<Integer> modes = new ArrayList<>();
        for (int i = 0; i < frequencies.length; i++) {
            if (frequencies[i] > maxFrequency) {
                maxFrequency = frequencies[i];
                modes.clear();
                modes.add(i);
            } else if (frequencies[i] == maxFrequency) {
                modes.add(i);
            }
        }

        List<String> options = new ArrayList<>();
        options.add(modes.toString());
        options.add(data.get(0).toString());
        options.add(data.get(numOfElements - 1).toString());
        options.add(String.valueOf(maxFrequency));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Statistics Question: Standard Deviation
    private static AutoGeneratedQuestion generateStandardDeviationQuestion() {
        Random random = new Random();
        int numOfElements = random.nextInt(10) + 5;

        List<Integer> data = new ArrayList<>();
        int sum = 0;

        for (int i = 0; i < numOfElements; i++) {
            int value = random.nextInt(101);
            data.add(value);
            sum += value;
        }

        String question = String.format("What is the standard deviation of the following data set? %s", data.toString());

        double mean = (double) sum / numOfElements;
        double sumOfSquaredDifferences = 0;
        for (int value : data) {
            sumOfSquaredDifferences += Math.pow(value - mean, 2);
        }
        double standardDeviation = Math.sqrt(sumOfSquaredDifferences / numOfElements);
        String formattedStandardDeviation = String.format("%.2f", standardDeviation);

        List<String> options = new ArrayList<>();
        options.add(formattedStandardDeviation);
        options.add(String.format("%.2f", standardDeviation + 5));
        options.add(String.format("%.2f", standardDeviation - 5));
        options.add(String.format("%.2f", standardDeviation + 10));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }


    // Autogenerated Geometry Question: Area
    private static AutoGeneratedQuestion generateAreaQuestion() {
        Random random = new Random();
        int length = random.nextInt(10) + 5;
        int width = random.nextInt(10) + 5;

        String question = String.format("What is the area of a rectangle with length %d and width %d?", length, width);

        int area = length * width;

        List<String> options = new ArrayList<>();
        options.add(String.valueOf(area));
        options.add(String.valueOf(area + 10));
        options.add(String.valueOf(area - 10));
        options.add(String.valueOf(area * 2));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Geometry Question: Perimeter
    private static AutoGeneratedQuestion generatePerimeterQuestion() {
        Random random = new Random();
        int side1 = random.nextInt(10) + 5;
        int side2 = random.nextInt(10) + 5;
        int side3 = random.nextInt(10) + 5;

        String question = String.format("What is the perimeter of a triangle with side lengths %d, %d, and %d?", side1, side2, side3);

        int perimeter = side1 + side2 + side3;

        List<String> options = new ArrayList<>();
        options.add(String.valueOf(perimeter));
        options.add(String.valueOf(perimeter + 10));
        options.add(String.valueOf(perimeter - 10));
        options.add(String.valueOf(perimeter * 2));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Set Theory Question: Union
    private static AutoGeneratedQuestion generateUnionQuestion() {
        Random random = new Random();
        int setSize = random.nextInt(5) + 3;

        Set<Integer> setA = generateRandomSet(setSize);
        Set<Integer> setB = generateRandomSet(setSize);

        String question = String.format("What is the union of the sets A = %s and B = %s?", setToString(setA), setToString(setB));

        Set<Integer> unionSet = new HashSet<>(setA);
        unionSet.addAll(setB);

        List<String> options = new ArrayList<>();
        options.add(setToString(unionSet));
        options.add(setToString(setA));
        options.add(setToString(setB));
        options.add(setToString(new HashSet<>()));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Set Theory Question: Intersection
    private static AutoGeneratedQuestion generateIntersectionQuestion() {
        Random random = new Random();
        int setSize = random.nextInt(5) + 3;

        Set<Integer> setA = generateRandomSet(setSize);
        Set<Integer> setB = generateRandomSet(setSize);

        String question = String.format("What is the intersection of the sets A = %s and B = %s?", setToString(setA), setToString(setB));

        Set<Integer> intersectionSet = new HashSet<>(setA);
        intersectionSet.retainAll(setB);

        List<String> options = new ArrayList<>();
        options.add(setToString(intersectionSet));
        options.add(setToString(setA));
        options.add(setToString(setB));
        options.add(setToString(new HashSet<>()));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Generate a random set of integers
    private static Set<Integer> generateRandomSet(int size) {
        Random random = new Random();
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < size; i++) {
            set.add(random.nextInt(20) + 1);
        }
        return set;
    }

    // Convert a set to a string representation
    private static String setToString(Set<Integer> set) {
        StringBuilder stringBuilder = new StringBuilder("{");
        for (int value : set) {
            stringBuilder.append(value).append(", ");
        }
        if (!set.isEmpty()) {
            stringBuilder.delete(stringBuilder.length() - 2, stringBuilder.length());
        }
        stringBuilder.append("}");
        return stringBuilder.toString();
    }


    // Autogenerated Calculus Question: Limit
    private static AutoGeneratedQuestion generateLimitQuestion() {
        Random random = new Random();
        int xValue = random.nextInt(10) + 1;

        String question = String.format("What is the limit of the function f(x) = (x^2 - 1) / (x - %d) as x approaches %d?", xValue, xValue);

        // Calculate the limit manually
        int limit = xValue + 1;

        List<String> options = new ArrayList<>();
        options.add(String.valueOf(limit));
        options.add(String.valueOf(limit + 1));
        options.add(String.valueOf(limit - 1));
        options.add(String.valueOf(limit * 2));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Calculus Question: Derivative
    private static AutoGeneratedQuestion generateDerivativeQuestion() {
        Random random = new Random();
        int coefficient = random.nextInt(5) + 1;
        int power = random.nextInt(4) + 1;

        String question = String.format("What is the derivative of the function f(x) = %dx^%d?", coefficient, power);

        // Calculate the derivative manually
        int derivativeCoefficient = coefficient * power;
        int derivativePower = power - 1;

        String derivative = String.format("%dx^%d", derivativeCoefficient, derivativePower);

        List<String> options = new ArrayList<>();
        options.add(derivative);
        options.add(String.format("%dx^%d", derivativeCoefficient + 1, derivativePower));
        options.add(String.format("%dx^%d", derivativeCoefficient - 1, derivativePower));
        options.add(String.format("%dx^%d", derivativeCoefficient, derivativePower + 1));

        int correctOptionIndex = 0; // Index of the correct answer

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }

    // Autogenerated Calculus Question: Integral
    private static AutoGeneratedQuestion generateIntegralQuestion() {
        Random random = new Random();
        int coefficient = random.nextInt(5) + 1;
        int power = random.nextInt(4) + 1;

        String question = String.format("What is the integral of the function f(x) = %dx^%d?", coefficient, power);

        // Calculate the integral manually
        double integralCoefficient = (double) coefficient / (power + 1);
        int integralPower = power + 1;

        String integral = String.format("%.2fx^%d", integralCoefficient, integralPower);

        List<String> options = new ArrayList<>();
        options.add(integral);
        options.add(String.format("%.2fx^%d", integralCoefficient + 1, integralPower));
        options.add(String.format("%.2fx^%d", integralCoefficient - 1, integralPower));
        options.add(String.format("%.2fx^%d", integralCoefficient, integralPower - 1));

        int correctOptionIndex = 0;

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }


    // Generate options for the question
    private static AutoGeneratedQuestion generateOptions(String question, int correctAnswer) {
        List<String> options = new ArrayList<>();
        options.add(String.valueOf(correctAnswer));

        Random random = new Random();
        for (int i = 0; i < 3; i++) {
            int offset = random.nextInt(5) + 1;
            int option = correctAnswer + (i % 2 == 0 ? offset : -offset);
            options.add(String.valueOf(option));
        }

        // Shuffle the options
        java.util.Collections.shuffle(options);

        // Get the index of the correct answer
        int correctOptionIndex = options.indexOf(String.valueOf(correctAnswer));

        return new AutoGeneratedQuestion(question, options, correctOptionIndex);
    }
}
